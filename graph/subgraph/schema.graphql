type CommitPhaseStarted @entity(immutable: true) {
  id: Bytes!
  gameId: Int! # uint8
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type GameEnded @entity(immutable: true) {
  id: Bytes!
  gameId: Int! # uint8
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type GameStarted @entity(immutable: true) {
  id: Bytes!
  gameId: Int! # uint8
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type GameUpdated @entity(immutable: true) {
  id: Bytes!
  gameStatus: Boolean! # bool
  winnerAddress: Bytes! # address
  gameId: Int! # uint8
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type GameWinner @entity(immutable: true) {
  id: Bytes!
  winner: Bytes! # address
  gameId: Int! # uint8
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type MapInitialized @entity(immutable: true) {
  id: Bytes!
  radius: Int! # uint8
  gameId: Int! # uint8
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type MapShrink @entity(immutable: true) {
  id: Bytes!
  gameId: Int! # uint8
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type MoveCommitted @entity(immutable: true) {
  id: Bytes!
  player: Bytes! # address
  gameId: Int! # uint8
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type MoveSubmitted @entity(immutable: true) {
  id: Bytes!
  player: Bytes! # address
  gameId: Int! # uint8
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type OwnershipTransferred @entity(immutable: true) {
  id: Bytes!
  previousOwner: Bytes! # address
  newOwner: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type PlayerAdded @entity(immutable: true) {
  id: Bytes!
  player: Bytes! # address
  gameId: Int! # uint8
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type PlayerDefeated @entity(immutable: true) {
  id: Bytes!
  player: Bytes! # address
  gameId: Int! # uint8
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ShipCollidedWithIsland @entity(immutable: true) {
  id: Bytes!
  captain: Bytes! # address
  gameId: Int! # uint8
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ShipHit @entity(immutable: true) {
  id: Bytes!
  victim: Bytes! # address
  attacker: Bytes! # address
  gameId: Int! # uint8
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ShipMoved @entity(immutable: true) {
  id: Bytes!
  captain: Bytes! # address
  initialQ: Int! # uint8
  initialR: Int! # uint8
  q: Int! # uint8
  r: Int! # uint8
  gameId: Int! # uint8
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ShipMovedInGame @entity(immutable: true) {
  id: Bytes!
  captain: Bytes! # address
  gameId: Int! # uint8
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ShipShot @entity(immutable: true) {
  id: Bytes!
  captain: Bytes! # address
  fromQ: Int! # uint8
  fromR: Int! # uint8
  shotQ: Int! # uint8
  shotR: Int! # uint8
  gameId: Int! # uint8
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ShipSunk @entity(immutable: true) {
  id: Bytes!
  captain: Bytes! # address
  gameId: Int! # uint8
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ShipSunkOutOfMap @entity(immutable: true) {
  id: Bytes!
  captain: Bytes! # address
  gameId: Int! # uint8
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type SubmitPhaseStarted @entity(immutable: true) {
  id: Bytes!
  gameId: Int! # uint8
  round: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type WorldUpdated @entity(immutable: true) {
  id: Bytes!
  gameId: Int! # uint8
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

# Manuelly created objects
type Game @entity {
  id: Bytes!
  gameId: Int
  radius: Int
  centerQ: Int
  centerR: Int
  currentRound: Round!
  state: GameState!
  players: [Player!]! @derivedFrom(field: "game")
  rounds: [Round!]! @derivedFrom(field: "game")
  cells: [Cell!]! @derivedFrom(field: "game")
}

type Player @entity {
  id: Bytes!
  address: Bytes!
  q: Int!
  r: Int!
  range: Int!
  shotRange: Int!
  game: Game!
  state: PlayerState!
  kills: Int
}

type Round @entity {
  game: Game
  id: Bytes!
  round: BigInt!
  radius: Int!
  shrunk: Boolean!
  moves: [Move!]! @derivedFrom(field: "round")
  shots: [Shot!]! @derivedFrom(field: "round")
}

type Move @entity {
  id: Bytes!
  game: Game!
  round: Round!
  player: Player!
  originQ: Int!
  originR: Int!
  destinationQ: Int!
  destinationR: Int!
  # state:
}

type Shot @entity {
  id: Bytes!
  game: Game!
  round: Round!
  player: Player!
  originQ: Int!
  originR: Int!
  destinationQ: Int!
  destinationR: Int!
}

type Island @entity(immutable: true) {
  id: Bytes!
  game: Game!
  q: Int!
  r: Int!
}

type Cell @entity(immutable: true) {
  id: Bytes!
  game: Game!
  q: Int!
  r: Int!
  island: Boolean!
}

enum PlayerState {
  active
  dropped
  beached
  crashed
  shot
  draw
  won
}

enum GameState {
  registering
  active
  finished
}