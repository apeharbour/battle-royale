type OwnershipTransferred @entity(immutable: true) {
  id: Bytes!
  previousOwner: Bytes! # address
  newOwner: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type PlayerAdded @entity(immutable: true) {
  id: Bytes!
  registrationPhase: BigInt! # uint256
  player: Bytes! # address
  gameId: BigInt! # uint256
  punkshipId: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
  registration: Registration!
}

type PlayerRegistered @entity(immutable: true) {
  id: Bytes!
  registrationPhase: BigInt! # uint256
  player: Bytes! # address
  punkshipId: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
  registration: Registration!
}

type RegistrationClosed @entity(immutable: true) {
  id: Bytes!
  registrationPhase: BigInt! # uint256
  gameId: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
  registration: Registration!
}

type RegistrationStarted @entity(immutable: true) {
  id: Bytes!
  registrationPhase: BigInt! # uint256
  firstGameId: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
  registration: Registration!
}

type Player @entity {
  id: Bytes!
  punkshipId: BigInt!
  registration: Registration!
  state: PlayerState!
  gameId: BigInt
}

type Registration @entity {
  id: Bytes!
  state: RegistrationPhase!
  phase: BigInt! # uint256
  firstGameId: BigInt! # uint256
  registrationStarted: RegistrationStarted @derivedFrom(field: "registration")
  registrationClosed: RegistrationClosed @derivedFrom(field: "registration")
  players: [Player!] @derivedFrom(field: "registration")
}

enum RegistrationPhase {
  OPEN
  CLOSED
}

enum PlayerState {
  REGISTERED
  ADDED
}

